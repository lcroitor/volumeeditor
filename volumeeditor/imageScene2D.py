#!/usr/bin/env python
# -*- coding: utf-8 -*-

#    Copyright 2010, 2011 C Sommer, C Straehle, U Koethe, FA Hamprecht. All rights reserved.
#    
#    Redistribution and use in source and binary forms, with or without modification, are
#    permitted provided that the following conditions are met:
#    
#       1. Redistributions of source code must retain the above copyright notice, this list of
#          conditions and the following disclaimer.
#    
#       2. Redistributions in binary form must reproduce the above copyright notice, this list
#          of conditions and the following disclaimer in the documentation and/or other materials
#          provided with the distribution.
#    
#    THIS SOFTWARE IS PROVIDED BY THE ABOVE COPYRIGHT HOLDERS ``AS IS'' AND ANY EXPRESS OR IMPLIED
#    WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND
#    FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE ABOVE COPYRIGHT HOLDERS OR
#    CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
#    CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
#    SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
#    ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
#    NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
#    ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#    
#    The views and conclusions contained in the software and documentation are those of the
#    authors and should not be interpreted as representing official policies, either expressed
#    or implied, of their employers.

import volumeeditor
from volumeeditor.colorama import Fore, Back, Style

from functools import partial
from PyQt4.QtCore import QRect, QRectF, QMutex, QPointF, Qt, QSizeF
from PyQt4.QtGui import QGraphicsScene, QImage, QTransform, QPen, QColor, QBrush, \
                        QFont

from patchAccessor import PatchAccessor
from imageSceneRendering import ImageSceneRenderThread

#*******************************************************************************
# I m a g e P a t c h                                                          *
#*******************************************************************************

class ImagePatch(object):    
    """
    A patch that makes up the whole 2D scene as displayed in ImageScene2D.
   
    An ImagePatch has a bounding box (self.rect, self.rectF) and
    its image content is either represented by a QImage
    
    When the current image content becomes invalid or is currently
    being overwritten, the patch becomes dirty.
    """ 
    
    def __init__(self, patchRectF, imageRectF, patchNr):
        #the bounding boxes (rectangles) of all patches in one layer do not overlap
        self.patchRectF = patchRectF
        self.patchRect  = QRect(round(patchRectF.x()),     round(patchRectF.y()), \
                                round(patchRectF.width()), round(patchRectF.height()))
        
        #the image rectangles of neighboring patches can overlap slightly, to account
        #for inaccuracies in sub-pixel rendering of many ImagePatch objects
        self.imageRectF = imageRectF
        self.imageRect   = QRect(round(imageRectF.x()),     round(imageRectF.y()), \
                                 round(imageRectF.width()), round(imageRectF.height()))
        
        self.image  = QImage(round(self.imageRectF.width()), round(self.imageRectF.height()), QImage.Format_ARGB32_Premultiplied)
        self.image.fill(0)
        
        self.patchNr = patchNr
        
        self._mutex = QMutex()
        
        #Whenever the underlying data changes, the data version is incremented.
        #By comparing the data version to the image and request version, it can
        #be determined if the content of this patch is recent or needs to be
        #re-computed.
        
        #version of the data
        self.dataVer = 0
        
        #version of self.image
        #
        #If self.imgVer < self.dataVer, the image needs to be re-computed
        #from the new data.
        self.imgVer  = -1
        
        #version of the request that has been generated to update the contents
        #of self.image
        #
        #If self.reqVer == self.dataVer, a request is currently running that will
        #eventually replace self.image with the new data.
        self.reqVer  = -2
        
    def lock(self):
        self._mutex.lock()
    def unlock(self):
        self._mutex.unlock()

#*******************************************************************************
# I m a g e S c e n e 2 D                                                      *
#*******************************************************************************

class ImageScene2D(QGraphicsScene):
    """
    The 2D scene description of a tiled image generated by evaluating
    an overlay stack, together with a 2D cursor.
    """
    
    # base patch size: blockSize x blockSize
    blockSize = 256
    #
    # overlap between patches 
    # positive number prevents rendering artifacts between patches for certain zoom levels
    overlap = 0
    
    @property
    def stackedImageSources(self):
        return self._stackedImageSources
    
    @stackedImageSources.setter
    def stackedImageSources(self, s):
        self._stackedImageSources = s
        s.layerDirty.connect(self._onLayerDirty)
        self._initializePatches()
        s.stackChanged.connect(partial(self._invalidateRect, QRect()))
        s.aboutToResize.connect(self._onAboutToResize)
        self._numLayers = len(s)
        self._initializePatches()

    def _onAboutToResize(self, newSize):
        self._renderThread.stop()
        self._numLayers = newSize
        self._initializePatches()
        self._renderThread.start()

    @property
    def showDebugPatches(self):
        return self._showDebugPatches
    @showDebugPatches.setter
    def showDebugPatches(self, show):
        self._showDebugPatches = show
        self._invalidateRect()

    @property
    def sceneShape(self):
        """
        The shape of the scene in QGraphicsView's coordinate system.
        """
        return (self.sceneRect().width(), self.sceneRect().height())
    @sceneShape.setter
    def sceneShape(self, sceneShape):
        """
        Set the size of the scene in QGraphicsView's coordinate system.
        sceneShape -- (widthX, widthY),
        where the origin of the coordinate system is in the upper left corner
        of the screen and 'x' points right and 'y' points down
        """   
            
        assert len(sceneShape) == 2
        self.setSceneRect(0,0, *sceneShape)
        
        #The scene shape is in Qt's QGraphicsScene coordinate system,
        #that is the origin is in the top left of the screen, and the
        #'x' axis points to the right and the 'y' axis down.
        
        #The coordinate system of the data handles things differently.
        #The x axis points down and the y axis points to the right.
        
        r = self.scene2data.mapRect(QRect(0,0,sceneShape[0], sceneShape[1]))
        sliceShape = (r.width(), r.height())
        
        del self._renderThread
        del self._imagePatches
        
        self._patchAccessor = PatchAccessor(sliceShape[0], sliceShape[1], blockSize=self.blockSize)
            
        self._renderThread = ImageSceneRenderThread(self.stackedImageSources, parent=self)

        self._renderThread.start()
        
        self._renderThread.patchAvailable.connect(self._schedulePatchRedraw)
        
        self._initializePatches()

    def setBrush(self, b):
        self._brush = b

    def __init__( self ):
        QGraphicsScene.__init__(self)
        self._updatableTiles = []

        # tiled rendering of patches
        self._imagePatches = None
        self._renderThread = None
        self._stackedImageSources = None
        self._numLayers = 0 #current number of 'layers'
        self._showDebugPatches = False
    
        self.data2scene = QTransform(0,1,1,0,0,0) 
        self.scene2data = self.data2scene.transposed()
        
        self._slicingPositionSettled = True
    
        def cleanup():
            self._renderThread.stop()
        self.destroyed.connect(cleanup)
    
    def _initializePatches(self):
        if not self._renderThread:
            return
              
        self._renderThread.stop()
        
        self._imagePatches = []
        #add an additional layer for the final composited image patch
        for layerNr in range(self._numLayers+2):
            self._imagePatches.append(list())
            for patchNr in range(self._patchAccessor.patchCount):
                #the patch accessor uses the data coordinate system
                #
                #because the patch is drawn on the screen, its holds coordinates
                #corresponding to Qt's QGraphicsScene's system, which need to be
                #converted to scene coordinates
                
                #the image rectangle includes an overlap margin
                imageRectF = self.data2scene.mapRect(self._patchAccessor.patchRectF(patchNr, self.overlap))
                
                #the patch rectangle has no overlap
                patchRectF = self.data2scene.mapRect(self._patchAccessor.patchRectF(patchNr, 0))
                
                p = ImagePatch(patchRectF, imageRectF, patchNr)
                
                self._imagePatches[layerNr].append(p)
        
        self._renderThread._imagePatches = self._imagePatches
        
        self._renderThread.start()
    
    def compositePatches(self):
        return self._imagePatches[self._numLayers]
    def brushingPatches(self):
        return self._imagePatches[self._numLayers+1]
    
    def _onLayerDirty(self, layerNr, rect):
        for p in self._imagePatches[layerNr]:
            if not rect.isValid() or p.patchRect.intersects(rect):
                p.dataVer += 1
        
        self._invalidateRect(rect)
            
    def _invalidateRect(self, rect = QRect()):
        if not rect.isValid():
            #everything is invalidated
            #we cancel all requests
            self._renderThread.cancelAll()
            self._updatableTiles = []
            
            for p in self.brushingPatches():
                p.lock()
                p.image.fill(0)
                p.imgVer = p.dataVer
                p.unlock()
            
            for layerNr in range(self._numLayers):
                for p in self._imagePatches[layerNr]:
                    p.lock()
                    p.dataVer += 1
                    p.unlock() 
        
        for p in self.compositePatches():
            if not rect.isValid() or rect.intersects(p.patchRect):
                #convention: if a rect is invalid, it is infinitely large
                p.dataVer += 1
                self._schedulePatchRedraw(p.patchNr)
                
    def _schedulePatchRedraw(self, patchNr) :
        p = self.compositePatches()[patchNr]
        #in QGraphicsScene::update, which is triggered by the
        #invalidate call below, the code
        #
        #view->d_func()->updateRectF(view->viewportTransform().mapRect(rect))
        #
        #seems to introduce rounding errors to the mapped rectangle.
        #
        #While we invalidate only one patch's rect, the rounding errors
        #enlarge the rect slightly, so that when update() is triggered
        #the neighbouring patches are also affected.
        #
        #To compensate, adjust the rectangle slightly (less than one pixel,
        #so it should not matter) 
        self.invalidate(p.patchRectF.adjusted(0.6,0.6,-0.6,-0.6), QGraphicsScene.BackgroundLayer)

    def drawForeground(self, painter, rect):
        for p in self.brushingPatches():
            if p.dataVer == p.imgVer or not p.patchRectF.intersect(rect): continue
            p.lock()
            painter.drawImage(p.imageRectF.topLeft(), p.image)
            p.unlock()
    
    def indicateSlicingPositionSettled(self, settled):
        self._slicingPositionSettled = settled
    
    def drawBackground(self, painter, rect):
        #Find all patches that intersect the given 'rect'.
        for patchNr in range(len(self._imagePatches[0])):
            p = self._imagePatches[0][patchNr]            
            if rect.intersects(p.patchRectF):
                for layerNr in range(self._numLayers):
                    p = self._imagePatches[layerNr][patchNr]
                    p.lock()
                    
                    if p.imgVer != p.dataVer and p.reqVer != p.dataVer:
                        #
                        if volumeeditor.verboseRequests:
                            volumeeditor.printLock.acquire()
                            print Fore.RED + "ImageScene2D '%s' asks for layer=%d, patch %d = (x=%d, y=%d, w=%d, h=%d)" \
                                  % (self.objectName(), layerNr, p.patchNr, p.patchRectF.x(), p.patchRectF.y(), \
                                     p.patchRectF.width(), p.patchRectF.height()) + Fore.RESET
                            volumeeditor.printLock.release()
                        #
                        self._renderThread.requestPatch((layerNr, p.patchNr))
                        p.reqVer = p.dataVer
                    p.unlock()
        
        for p in self.compositePatches():
            if not p.patchRectF.intersect(rect):
                continue
            
            p.lock()
            painter.drawImage(p.imageRectF.topLeft(), p.image)
            p.unlock()

            if self._slicingPositionSettled:
                painter.save()
                painter.setOpacity(0.5)
                
                dirtyColor = QColor(255,0,0)
                doneColor  = QColor(0,255,0)
                
                numDirtyLayers = 0
                for layerNr in range(self._numLayers):
                    _p = self._imagePatches[layerNr][p.patchNr]
                    _p.lock()
                    if _p.imgVer != _p.dataVer:
                        numDirtyLayers += 1
                    _p.unlock()
                    
                if numDirtyLayers > 0:
                    painter.setBrush(QBrush(dirtyColor, Qt.SolidPattern))
                    painter.setPen(dirtyColor)
                    
                    w,h = p.patchRectF.width(), p.patchRectF.height()
                    
                    rectangle = QRectF(p.patchRectF.center()-QPointF(w/4,h/4), QSizeF(w/2, h/2));
                    startAngle = 0 * 16
                    spanAngle  = int(numDirtyLayers/float(self._numLayers)*360.0) * 16
                    painter.drawPie(rectangle, startAngle, spanAngle);
                    
                    painter.setBrush(QBrush(dirtyColor, Qt.NoBrush))
                    adjRect = p.patchRectF.adjusted(5,5,-5,-5)
                    painter.drawRect(adjRect)
                
                if self._showDebugPatches:
                    if numDirtyLayers > 0:
                        painter.setBrush(QBrush(dirtyColor, Qt.NoBrush))
                        painter.setPen(dirtyColor) 
                    else:
                        painter.setBrush(QBrush(doneColor, Qt.NoBrush))
                        painter.setPen(doneColor)
                    adjRect = p.patchRectF.adjusted(5,5,-5,-5)
                    painter.drawRect(adjRect)
                    
                painter.restore()
                    